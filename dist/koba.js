// Generated by CoffeeScript 1.6.3
/*
Koba 1.0.1
Bridge between Knockout and Backbone.
Copyright (c) 2014, Mathieu MAST https://github.com/mathieumast/koba
Licensed under the MIT license
*/


(function() {
  var koba, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (!koba) {
    koba = {};
  }

  if (typeof define === 'function' && define.amd) {
    define('koba', [], function() {
      return koba;
    });
  }

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = koba;
  }

  root.koba = koba;

  koba.View = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _ref = _Class.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    _Class.prototype.initialize = function(params) {
      if (params == null) {
        params = {};
      }
      _Class.__super__.initialize.apply(this, arguments);
      if (params.data) {
        return this.data = params.data;
      }
    };

    _Class.prototype.bindData = function(data) {
      if (data) {
        this.data = data;
      }
      this.unbindData();
      this.viewModel = new koba.ViewModel(this.data);
      ko.applyBindings(this.viewModel, this.$el[0]);
      return this;
    };

    _Class.prototype.unbindData = function() {
      if (this.viewModel) {
        ko.cleanNode(this.$el[0]);
        this.viewModel.destroy();
      }
      return this;
    };

    _Class.prototype.remove = function() {
      this.unbindData();
      _Class.__super__.remove.apply(this, arguments);
      return this;
    };

    return _Class;

  })(Backbone.View);

  koba.ViewModel = (function() {
    var listenCollectionTo, listenTo, observe, observeArray, subscribe;

    function _Class(__data) {
      this.__data = __data;
      this.__subscriptions = [];
      _.extend(this, Backbone.Events);
      _.extend(this, this.__constructViewModel(this.__data));
    }

    _Class.prototype.destroy = function() {
      var subscription, _i, _len, _ref1, _results;
      this.stopListening();
      _ref1 = this.__subscriptions;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        subscription = _ref1[_i];
        _results.push(subscription.dispose());
      }
      return _results;
    };

    _Class.prototype.__constructViewModel = function(obj, parent, property) {
      var elem, res, tbl, value, _i, _j, _len, _len1, _ref1, _ref2;
      if (!obj) {
        res = observe(property, null, parent, this);
      } else if (obj.attributes) {
        res = {};
        _ref1 = obj.attributes;
        for (elem in _ref1) {
          value = _ref1[elem];
          res[elem] = this.__constructViewModel(value, obj, elem);
        }
      } else if (obj.models) {
        tbl = [];
        _ref2 = obj.models;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          value = _ref2[_i];
          tbl.push(this.__constructViewModel(value, obj, null));
        }
        res = observeArray(tbl, obj, this);
      } else if (_.isArray(obj)) {
        tbl = [];
        for (_j = 0, _len1 = obj.length; _j < _len1; _j++) {
          value = obj[_j];
          tbl.push(this.__constructViewModel(value, obj, null));
        }
        res = observeArray(tbl, null, this);
      } else if (_.isObject(obj)) {
        res = {};
        for (elem in obj) {
          value = obj[elem];
          res[elem] = this.__constructViewModel(value, obj, elem);
        }
      } else {
        res = observe(property, obj, parent, this);
      }
      return res;
    };

    observe = function(property, value, model, viewModel) {
      var observable;
      observable = ko.observable(value);
      if (model && property) {
        listenTo(viewModel, model, observable, property);
        subscribe(viewModel, model, observable, property);
      }
      return observable;
    };

    listenTo = function(viewModel, model, observable, property) {
      return viewModel.listenTo(model, "change:" + property, function(model, value, options) {
        return observable(value);
      });
    };

    subscribe = function(viewModel, model, observable, property) {
      return viewModel.__subscriptions.push(observable.subscribe(function(value) {
        return model.set(property, value);
      }));
    };

    observeArray = function(array, collection, viewModel) {
      var observableArray;
      observableArray = ko.observableArray(array);
      if (collection) {
        listenCollectionTo(viewModel, collection, observableArray);
      }
      return observableArray;
    };

    listenCollectionTo = function(viewModel, collection, observableArray) {
      viewModel.listenTo(collection, "add", function(model, collection, options) {
        return observableArray.push(viewModel.__constructViewModel(model, collection, null));
      });
      return viewModel.listenTo(collection, "remove", function(model, collection, options) {
        return observableArray.remove(model);
      });
    };

    return _Class;

  })();

}).call(this);
