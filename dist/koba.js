// Generated by CoffeeScript 1.6.3
/*
koba 1.0.0
Allow two-way data-binding from Knockout for Backbone
Copyright (c) 2014, Mathieu MAST https://github.com/mathieumast/koba
Licensed under the MIT license
*/


(function() {
  var koba, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (!koba) {
    koba = {};
  }

  if (typeof define === 'function' && define.amd) {
    define('koba', [], function() {
      return koba;
    });
  }

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = koba;
  }

  root.koba = koba;

  koba.View = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _ref = _Class.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    _Class.prototype.initialize = function(params) {
      if (params == null) {
        params = {};
      }
      _Class.__super__.initialize.apply(this, arguments);
      return this.data = params != null ? params.data : void 0;
    };

    _Class.prototype.render = function(params) {
      if (params == null) {
        params = {};
      }
      _Class.__super__.render.apply(this, arguments);
      this.data = params != null ? params.data : void 0;
      if (this.data) {
        return bindData();
      }
    };

    _Class.prototype.bindData = function() {
      this.unbindData();
      this.viewModel = new koba.ViewModel(this.data);
      return ko.applyBindings(this.viewModel, this.$el[0]);
    };

    _Class.prototype.unbindData = function() {
      if (this.viewModel) {
        ko.cleanNode(this.$el[0]);
        return this.viewModel.destroy();
      }
    };

    _Class.prototype.remove = function() {
      this.unbindData();
      return _Class.__super__.remove.apply(this, arguments);
    };

    return _Class;

  })(Backbone.View);

  koba.ViewModel = (function() {
    var listenTo, observable, observableArray, subscribe;

    function _Class(__data) {
      this.__data = __data;
      this.__subscriptions = [];
      _.extend(this, Backbone.Events);
      _.extend(this, this.__constructViewModel(this.__data));
    }

    _Class.prototype.destroy = function() {
      var subscription, _i, _len, _ref1, _results;
      this.stopListening();
      _ref1 = this.__subscriptions;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        subscription = _ref1[_i];
        _results.push(subscription.dispose());
      }
      return _results;
    };

    _Class.prototype.__constructViewModel = function(obj, parent, property) {
      var elem, res, tbl, value, _ref1, _ref2;
      if (!obj) {
        res = observable(property, null, parent, this);
      } else if (obj.attributes) {
        res = {};
        _ref1 = obj.attributes;
        for (elem in _ref1) {
          value = _ref1[elem];
          res[elem] = this.__constructViewModel(value, obj, elem);
        }
      } else if (obj.models) {
        tbl = [];
        _ref2 = obj.models;
        for (elem in _ref2) {
          value = _ref2[elem];
          tbl.push(this.__constructViewModel(value, obj, elem));
        }
        res = observableArray(property, tbl, obj, this);
      } else if (_.isArray(obj)) {
        res = observableArray(property, obj, parent, this);
      } else {
        res = observable(property, obj, parent, this);
      }
      return res;
    };

    observable = function(property, value, model, viewModel) {
      var obs;
      obs = ko.observable(value);
      listenTo(viewModel, model, property);
      subscribe(viewModel, model, obs, property);
      return obs;
    };

    observableArray = function(property, array, collection, viewModel) {
      return ko.observableArray(array);
    };

    listenTo = function(viewModel, model, property) {
      return viewModel.listenTo(model, "change:" + property, function(model, value, options) {
        if (typeof viewModel[property] === 'function') {
          return viewModel[property](value);
        }
      });
    };

    subscribe = function(viewModel, model, obs, property) {
      return viewModel.__subscriptions.push(obs.subscribe(function(value) {
        return model.set(property, value);
      }));
    };

    return _Class;

  })();

}).call(this);
